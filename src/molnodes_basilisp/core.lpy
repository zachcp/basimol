(ns molnodes_basilisp.core
   (:import bpy
            builtins
            databpy
            mathutils
            [molecularnodes.entities.molecule.molecule :as molecule]
            [molecularnodes.download :as download]
            [molecularnodes.blender.nodes  :as bl_nodes]
            [numpy :as np]
            [biotite.structure.io.pdbx :as pdbx]
            [biotite.structure.filter :as filter]
            [biotite.structure :as struct]
            [biotite.structure.bonds :as bonds])
   (:require [basilisp.string :as str]))


 (defn auto-set-camera []
   #_TODO "auto set the view")

 (defn- center-array [atom-array]
   (if (builtins/isinstance atom-array struct/AtomArrayStack)
     (doseq [arr atom-array]
       (set! (.-coord arr)
             (np/subtract (.-coord arr)
                          (databpy/centre (.-coord arr)))))
     (set! (.-coord atom-array)
           (np/subtract (.-coord atom-array)
                        (databpy/centre (.-coord atom-array)))))
   atom-array)


 ;; Remove Molecules and then the Cube
 (defn clear-objects []
   (let [mol-collection (.. bpy -data -collections (get "Molecular Nodes"))]
     (when mol-collection
       (doseq [obj (.. mol-collection -objects)]
         (.. bpy -data -objects (remove obj ** :do_unlink true))))
     (doseq [obj (.. bpy -data -objects)]
       (when (and (= "MESH" (.-type obj))
                  (not= "Camera" (.-name obj)))
         (.. bpy -data -objects (remove obj ** :do_unlink true))))))



 (defn filter-amino-acids [arr] (filter/filter_amino_acids arr))
 
 (defn filter-atomname [arr atomname] (= atomname (.get_annotation arr "atom_name")))
 
 (defn filter-canonical-amino-acids [arr] (filter/filter_canonical_amino_acids arr))
 
 (defn filter-canonical-nucleotides [arr] (filter/filter_canonical_nucleotides arr))
 
 (defn filter-carbohydrates [arr] (filter/filter_carbohydrates arr))
 
 (defn filter-chain [arr chain] (= chain (.get_annotation arr "chain_id")))
 
 (defn filter-element [arr element] (= element (.get_annotation arr "element")))
 
 (defn filter-first-altloc [arr] (filter/filter_first_altloc arr))
 
 (defn filter-hetero [arr] (= true (.get_annotation arr "hetero")))
 
 (defn filter-highest-occupancy-altloc [arr] (filter/filter_highest_occupancy_altloc arr))
 
 (defn filter-inscode [arr inscode] (= inscode (.get_annotation arr "ins_code")))
 
 (defn filter-intersection [arr] (filter/filter_intersection arr))
 
 (defn filter-linear-bond-continuity [arr] (filter/filter_linear_bond_continuity arr))
 
 (defn filter-monoatomic-ions [arr] (filter/filter_monoatomic_ions arr))
 
 (defn filter-nucleotides [arr] (filter/filter_nucleotides arr))
 
 (defn filter-peptide-backbone [arr] (filter/filter_peptide_backbone arr))
 
 (defn filter-phosphate-backbone [arr] (filter/filter_phosphate_backbone arr))
 
 (defn filter-polymer [arr] (filter/filter_polymer arr))
 
 (defn filter-resid [arr num] (= num (.get_annotation arr "res_id")))
 
 (defn filter-resname [arr res_name] (= res_name (.get_annotation arr "res_name")))
 
 (defn filter-solvent [arr] (filter/filter_solvent arr))

 

 (defn- get-temp-context-info []
   (let [win (.. bpy -context -window)
         areas3d (let [areas (.. bpy -context -screen -areas)]
                   (-> (filter #(= (.-type %) "VIEW_3D") areas)
                       first))
         region (let [region (.-regions areas3d)]
                  (-> (filter #(= (.-type %) "WINDOW") region)
                      first))]
     {:window win
      :area areas3d
      :region region}))


 (defn get-view []
   (let [ctx (get-temp-context-info)
         area3d (:area ctx)
         camera (.. bpy -context -scene -camera)
         region3d (.. area3d -spaces -active -region_3d)]
     (when (and area3d region3d camera)
       (let [view-matrix (.-view_matrix region3d)
             camera-matrix (.inverted view-matrix)]
         (set! (.-matrix_world camera) camera-matrix)
         (let [mat (.-matrix_world camera)]
           (map vec mat))))))


;; core loading function. used molnodes code + biotite bond connections.
 (defn load-pdb [code]
   ^struct/AtomArrayStack
   (let [stack (-> code download/download pdbx.CIFFile/read pdbx/get_structure)
         _  (set! (.-bonds stack) (bonds/connect_via_residue_names stack))
         stack2   (center-array stack)]
     stack2))


 (defn render! []
   #_TODO "take a collection of states corresponding to frames and generate an output")


 (defn set-view! [matrix]
   (let [mmat (mathutils/Matrix (vec matrix))
         ctx (get-temp-context-info)
         area3d (:area ctx)
         camera (.. bpy -context -scene -camera)
         region3d (.. area3d -spaces -active -region_3d)]
     (when (and area3d region3d camera)
       (set! (.. bpy -context -scene -camera -matrix_world) mmat)
       (set! (.-view_matrix region3d) (.inverted mmat)))))




 (comment

;; styles_mapping = {
;;     "preset_1": "Style Preset 1",
;;     "preset_2": "Style Preset 2",
;;     "preset_3": "Style Preset 3",
;;     "preset_4": "Style Preset 4",
;;     "atoms": "Style Spheres",
;;     "spheres": "Style Spheres",
;;     "vdw": "Style Spheres",
;;     "sphere": "Style Spheres",
;;     "cartoon": "Style Cartoon",
;;     "sticks": "Style Sticks",
;;     "ribbon": "Style Ribbon",
;;     "surface": "Style Surface",
;;     "ball_and_stick": "Style Ball and Stick",
;;     "ball+stick": "Style Ball and Stick",
;;     "oxdna": "MN_oxdna_style_ribbon",
;;     "density_surface": "Style Density Surface",
;;     "density_wire": "Style Density Wire",
;; }
  ;; style is one of the options above
  ;; pre filter the array. only array allowed not AtomStacks
  ;;
   (defn render-atomarray [arr style material]
     (let [molname (str (gensym))
           [obj _] (molecule/_create_object  arr ** :name molname :style style)]

      ;; style creation is here.
       (bl_nodes/create_starting_node_tree obj ** :style style)

      ;; Get the geometry nodes modifier
       (let [modifier (first (filter #(= (.-type %) "NODES") (vec (.-modifiers obj))))
                  node-tree (.-node_group modifier)
                  nodes (.-nodes node-tree)]
         (when-let [  style-node (first (filter #(str/includes? (.-name %) "Style") (vec nodes)))]
           (when-let [material-input (first (filter #(= (.-name %) "Material") (.. style-node -inputs)))]
                             ;; Set the material in the node's Material input 
                (.. obj -data -materials (append material))
                (set! (.-default_value material-input) material))))))


 (let [arr (aget  fap 0 (filter-resid  fap 1))
       style "sticks"
       genname (str (gensym))
       material (.. bpy -data -materials (new genname))]
   (set! (.-diffuse_color material) [1 0 0 1])
   (render-atomarray arr style material))

 
   (defn create-simple-material [name]
     (let [materials (.. bpy -data -materials)
           material (.new materials name)]
       (python/setattr material "use_nodes" true)
       material))
   
   
    ;; move the view around and get the view
    ;; the move around and set it back
   (def mat01 (get-view))
   (set-view! (get-view))
   
   
    ;; load a file
   (def fap (load-pdb "1FAP"))

   
 (set-view! (get-view))
 (clear-objects)

  ;;  (defn filter-atom-name [stack, atomname])
  ;;  (defn render! [stack])
 )

   